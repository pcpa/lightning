#include "alu.inc"

.code	$(4 * 1024 * 1024)
	prolog 0

#define MOD(N, T, I0, I1, V)	ALU(N, T, mod, I0, I1, V)
	MOD(0, i,	0x7fffffff, 1,		0)
	MOD(1, i,	1,	    0x7fffffff, 1)
	MOD(2, i,	0x80000000, 1,		0)
	MOD(3, i,	1,	    0x80000000, 1)
	MOD(4, i,	0x7fffffff, 2,		1)
	MOD(5, i,	2,	    0x7fffffff,	2)
	MOD(6, i,	0x80000000, 2,		0)
	MOD(7, i,	2,	    0x80000000, 2)
	MOD(8, i,	0x7fffffff, 0x80000000, 0x7fffffff)
	MOD(9, i,	0x80000000, 0x7fffffff, 0xffffffff)
	MOD(10, i,	0,	    0x7fffffff,	0)
	MOD(11, i,	0x7fffffff, 0xffffffff, 0)
	MOD(12, i,	0xffffffff, 0x7fffffff, 0xffffffff)
	MOD(13, i,	0xffffffff, 0xffffffff, 0)
	MOD(0, ui,	0x7fffffff, 1,		0)
	MOD(1, ui,	1,	    0x7fffffff, 1)
	MOD(2, ui,	0x80000000, 1,		0)
	MOD(3, ui,	1,	    0x80000000, 1)
	MOD(4, ui,	0x7fffffff, 2,		1)
	MOD(5, ui,	2,	    0x7fffffff,	2)
	MOD(6, ui,	0x80000000, 2,		0)
	MOD(7, ui,	2,	    0x80000000, 2)
	MOD(8, ui,	0x7fffffff, 0x80000000, 0x7fffffff)
	MOD(9, ui,	0x80000000, 0x7fffffff, 1)
	MOD(10, ui,	0,	    0x7fffffff,	0)
	MOD(11, ui,	0x7fffffff, 0xffffffff, 0x7fffffff)
	MOD(12, ui,	0xffffffff, 0x7fffffff, 1)
	MOD(13, ui,	0xffffffff, 0xffffffff, 0)
#if __WORDSIZE == 32
	MOD(0, l,	0x7fffffff, 1,		0)
	MOD(1, l,	1,	    0x7fffffff, 1)
	MOD(2, l,	0x80000000, 1,		0)
	MOD(3, l,	1,	    0x80000000, 1)
	MOD(4, l,	0x7fffffff, 2,		1)
	MOD(5, l,	2,	    0x7fffffff,	2)
	MOD(6, l,	0x80000000, 2,		0)
	MOD(7, l,	2,	    0x80000000, 2)
	MOD(8, l,	0x7fffffff, 0x80000000, 0x7fffffff)
	MOD(9, l,	0x80000000, 0x7fffffff, 0xffffffff)
	MOD(10, l,	0,	    0x7fffffff,	0)
	MOD(11, l,	0x7fffffff, 0xffffffff, 0)
	MOD(12, l,	0xffffffff, 0x7fffffff, 0xffffffff)
	MOD(13, l,	0xffffffff, 0xffffffff, 0)
	MOD(0, ul,	0x7fffffff, 1,		0)
	MOD(1, ul,	1,	    0x7fffffff, 1)
	MOD(2, ul,	0x80000000, 1,		0)
	MOD(3, ul,	1,	    0x80000000, 1)
	MOD(4, ul,	0x7fffffff, 2,		1)
	MOD(5, ul,	2,	    0x7fffffff,	2)
	MOD(6, ul,	0x80000000, 2,		0)
	MOD(7, ul,	2,	    0x80000000, 2)
	MOD(8, ul,	0x7fffffff, 0x80000000, 0x7fffffff)
	MOD(9, ul,	0x80000000, 0x7fffffff, 1)
	MOD(10, ul,	0,	    0x7fffffff,	0)
	MOD(11, ul,	0x7fffffff, 0xffffffff, 0x7fffffff)
	MOD(12, ul,	0xffffffff, 0x7fffffff, 1)
	MOD(13, ul,	0xffffffff, 0xffffffff, 0)
#else
	MOD(0, l,	0x7fffffff,	    1,			0)
	MOD(1, l,	1,		    0x7fffffff,		1)
	MOD(2, l,	0x80000000,	    1,			0)
	MOD(3, l,	1,		    0x80000000,		1)
	MOD(4, l,	0x7fffffff,	    2,			1)
	MOD(5, l,	2,		    0x7fffffff,		2)
	MOD(6, l,	0x80000000,	    2,			0)
	MOD(7, l,	2,		    0x80000000, 	2)
	MOD(8, l,	0x7fffffff,	    0x80000000,		0x7fffffff)
	MOD(9, l,	0x80000000,	    0x7fffffff,		1)
	MOD(10, l,	0,		    0x7fffffff,		0)
	MOD(11, l,	0x7fffffff,	    0xffffffff,		0x7fffffff)
	MOD(12, l,	0xffffffff,	    0x7fffffff,		1)
	MOD(13, l,	0xffffffff,	    0xffffffff,		0)
	MOD(14, l,	0x7fffffffffffffff, 1,			0)
	MOD(15, l,	1,		    0x7fffffffffffffff,	1)
	MOD(16, l,	0x8000000000000000, 1,			0)
	MOD(17, l,	1,		    0x8000000000000000,	1)
	MOD(18, l,	0x7fffffffffffffff, 2,			1)
	MOD(19, l,	2,		    0x7fffffffffffffff,	2)
	MOD(20, l,	0x8000000000000000, 2,			0)
	MOD(21, l,	2,		    0x8000000000000000,	2)
	MOD(22, l,	0x7fffffffffffffff, 0x8000000000000000,	0x7fffffffffffffff)
	MOD(23, l,	0x8000000000000000, 0x7fffffffffffffff,	0xffffffffffffffff)
	MOD(24, l,	0x7fffffffffffffff, 0xffffffffffffffff,	0)
	MOD(25, l,	0xffffffffffffffff, 0x7fffffffffffffff,	0xffffffffffffffff)
	MOD(26, l,	0xffffffffffffffff, 0xffffffffffffffff,	0)
	MOD(0, ul,	0x7fffffff,	    1,			0)
	MOD(1, ul,	1,		    0x7fffffff,		1)
	MOD(2, ul,	0x80000000,	    1,			0)
	MOD(3, ul,	1,		    0x80000000,		1)
	MOD(4, ul,	0x7fffffff,	    2,			1)
	MOD(5, ul,	2,		    0x7fffffff,		2)
	MOD(6, ul,	0x80000000,	    2,			0)
	MOD(7, ul,	2,		    0x80000000,		2)
	MOD(8, ul,	0x7fffffff,	    0x80000000,		0x7fffffff)
	MOD(9, ul,	0x80000000,	    0x7fffffff,		1)
	MOD(10, ul,	0,		    0x7fffffff,		0)
	MOD(11, ul,	0x7fffffff,	    0xffffffff,		0x7fffffff)
	MOD(12, ul,	0xffffffff,	    0x7fffffff,		1)
	MOD(13, ul,	0xffffffff,	    0xffffffff,		0)
	MOD(14, ul,	0x7fffffffffffffff, 1,			0)
	MOD(15, ul,	1,		    0x7fffffffffffffff,	1)
	MOD(16, ul,	0x8000000000000000, 1,			0)
	MOD(17, ul,	1,		    0x8000000000000000,	1)
	MOD(18, ul,	0x7fffffffffffffff, 2,			1)
	MOD(19, ul,	2,		    0x7fffffffffffffff,	2)
	MOD(20, ul,	0x8000000000000000, 2,			0)
	MOD(21, ul,	2,		    0x8000000000000000,	2)
	MOD(22, ul,	0x7fffffffffffffff, 0x8000000000000000,	0x7fffffffffffffff)
	MOD(23, ul,	0x8000000000000000, 0x7fffffffffffffff,	1)
	MOD(24, ul,	0x7fffffffffffffff, 0xffffffffffffffff,	0x7fffffffffffffff)
	MOD(25, ul,	0xffffffffffffffff, 0x7fffffffffffffff,	1)
	MOD(26, ul,	0xffffffffffffffff, 0xffffffffffffffff,	0)
#endif

#undef MOD
#define MOD(N, T, I0, V)	ALUC(N, T, mod, I0, V)
	MOD(0, i,	0x7fffffff,		0)
	MOD(1, i,	0x80000000,		0)
	MOD(2, i,	0xffffffff,		0)
	MOD(0, ui,	0x7fffffff,		0)
	MOD(1, ui,	0x80000000,		0)
	MOD(2, ui,	0xffffffff,		0)
#if __WORDSIZE == 32
	MOD(0, l,	0x7fffffff,		0)
	MOD(1, l,	0x80000000,		0)
	MOD(2, l,	0xffffffff,		0)
	MOD(0, ul,	0x7fffffff,		0)
	MOD(1, ul,	0x80000000,		0)
	MOD(2, ul,	0xffffffff,		0)
#else
	MOD(0, l,	0x7fffffff,		0)
	MOD(1, l,	0x80000000,		0)
	MOD(2, l,	0xffffffff,		0)
	MOD(3, l,	0x7fffffffffffffff,	0)
	MOD(4, l,	0x8000000000000000,	0)
	MOD(5, l,	0xffffffffffffffff,	0)
	MOD(0, ul,	0x7fffffff,		0)
	MOD(1, ul,	0x80000000,		0)
	MOD(2, ul,	0xffffffff,		0)
	MOD(3, ul,	0x7fffffffffffffff,	0)
	MOD(4, ul,	0x8000000000000000,	0)
	MOD(5, ul,	0xffffffffffffffff,	0)
#endif

	ret
