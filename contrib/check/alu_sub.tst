#include "alu.inc"

.code	$(4 * 1024 * 1024)
	prolog 0

#define SUB(N, T, I0, I1, V)	ALU(N, T, sub, I0, I1, V)
	SUB(0, i,	0x7fffffff, 1,		0x7ffffffe)
	SUB(1, i,	1,	    0x7fffffff, 0x80000002)
	SUB(2, i,	0x80000000, 1,		0x7fffffff)
	SUB(3, i,	1,	    0x80000000, 0x80000001)
	SUB(4, i,	0x7fffffff, 0x80000000, 0xffffffff)
	SUB(5, i,	0x80000000, 0x7fffffff,	1)
	SUB(6, i,	0x7fffffff, 0xffffffff, 0x80000000)
	SUB(7, i,	0xffffffff, 0x7fffffff, 0x80000000)
	SUB(9, i,	0xffffffff, 0xffffffff,	0)
	SUB(10, i,	0x7fffffff, 0,		0x7fffffff)
	SUB(11, i,	0,	    0x7fffffff,	0x80000001)
	SUB(0, ui,	0x7fffffff, 1,		0x7ffffffe)
	SUB(1, ui,	1,	    0x7fffffff, 0x80000002)
	SUB(2, ui,	0x80000000, 1,		0x7fffffff)
	SUB(3, ui,	1,	    0x80000000, 0x80000001)
	SUB(4, ui,	0x7fffffff, 0x80000000, 0xffffffff)
	SUB(5, ui,	0x80000000, 0x7fffffff,	1)
	SUB(6, ui,	0x7fffffff, 0xffffffff, 0x80000000)
	SUB(7, ui,	0xffffffff, 0x7fffffff, 0x80000000)
	SUB(9, ui,	0xffffffff, 0xffffffff,	0)
	SUB(10, ui,	0x7fffffff, 0,		0x7fffffff)
	SUB(11, ui,	0,	    0x7fffffff,	0x80000001)
#if __WORDSIZE == 32
	SUB(0, l,	0x7fffffff, 1,		0x7ffffffe)
	SUB(1, l,	1,	    0x7fffffff, 0x80000002)
	SUB(2, l,	0x80000000, 1,		0x7fffffff)
	SUB(3, l,	1,	    0x80000000, 0x80000001)
	SUB(4, l,	0x7fffffff, 0x80000000, 0xffffffff)
	SUB(5, l,	0x80000000, 0x7fffffff,	1)
	SUB(6, l,	0x7fffffff, 0xffffffff, 0x80000000)
	SUB(7, l,	0xffffffff, 0x7fffffff, 0x80000000)
	SUB(9, l,	0xffffffff, 0xffffffff,	0)
	SUB(10, l,	0x7fffffff, 0,		0x7fffffff)
	SUB(11, l,	0,	    0x7fffffff,	0x80000001)
	SUB(0, ul,	0x7fffffff, 1,		0x7ffffffe)
	SUB(1, ul,	1,	    0x7fffffff, 0x80000002)
	SUB(2, ul,	0x80000000, 1,		0x7fffffff)
	SUB(3, ul,	1,	    0x80000000, 0x80000001)
	SUB(4, ul,	0x7fffffff, 0x80000000, 0xffffffff)
	SUB(5, ul,	0x80000000, 0x7fffffff,	1)
	SUB(6, ul,	0x7fffffff, 0xffffffff, 0x80000000)
	SUB(7, ul,	0xffffffff, 0x7fffffff, 0x80000000)
	SUB(9, ul,	0xffffffff, 0xffffffff,	0)
	SUB(10, ul,	0x7fffffff, 0,		0x7fffffff)
	SUB(11, ul,	0,	    0x7fffffff,	0x80000001)
	SUB(0, p,	0x7fffffff, 1,		0x7ffffffe)
	SUB(1, p,	1,	    0x7fffffff, 0x80000002)
	SUB(2, p,	0x80000000, 1,		0x7fffffff)
	SUB(3, p,	1,	    0x80000000, 0x80000001)
	SUB(4, p,	0x7fffffff, 0x80000000, 0xffffffff)
	SUB(5, p,	0x80000000, 0x7fffffff,	1)
	SUB(6, p,	0x7fffffff, 0xffffffff, 0x80000000)
	SUB(7, p,	0xffffffff, 0x7fffffff, 0x80000000)
	SUB(9, p,	0xffffffff, 0xffffffff,	0)
	SUB(10, p,	0x7fffffff, 0,		0x7fffffff)
	SUB(11, p,	0,	    0x7fffffff,	0x80000001)
#else
	SUB(0, l,	0x7fffffff,	    1,			0x7ffffffe)
	SUB(1, l,	1,		    0x7fffffff,		0xffffffff80000002)
	SUB(2, l,	0x80000000,	    1,			0x7fffffff)
	SUB(3, l,	1,		    0x80000000,		0xffffffff80000001)
	SUB(4, l,	0x7fffffff,	    0x80000000,		0xffffffffffffffff)
	SUB(5, l,	0x80000000,	    0x7fffffff,		1)
	SUB(6, l,	0x7fffffff,	    0xffffffff,		0xffffffff80000000)
	SUB(7, l,	0xffffffff,	    0x7fffffff,		0x80000000)
	SUB(9, l,	0xffffffff,	    0xffffffff,		0)
	SUB(10, l,	0x7fffffff,	    0,			0x7fffffff)
	SUB(11, l,	0,		    0x7fffffff,		0xffffffff80000001)
	SUB(12, l,	0x7fffffffffffffff, 1,			0x7ffffffffffffffe)
	SUB(13, l,	1,		    0x7fffffffffffffff, 0x8000000000000002)
	SUB(14, l,	0x8000000000000000, 1,			0x7fffffffffffffff)
	SUB(15, l,	1,		    0x8000000000000000, 0x8000000000000001)
	SUB(16, l,	0x7fffffffffffffff, 0x8000000000000000, 0xffffffffffffffff)
	SUB(17, l,	0x8000000000000000, 0x7fffffffffffffff,	1)
	SUB(18, l,	0x7fffffffffffffff, 0xffffffffffffffff, 0x8000000000000000)
	SUB(19, l,	0xffffffffffffffff, 0x7fffffffffffffff, 0x8000000000000000)
	SUB(20, l,	0xffffffffffffffff, 0xffffffffffffffff,	0)
	SUB(0, ul,	0x7fffffff,	    1,			0x7ffffffe)
	SUB(1, ul,	1,		    0x7fffffff,		0xffffffff80000002)
	SUB(2, ul,	0x80000000,	    1,			0x7fffffff)
	SUB(3, ul,	1,		    0x80000000,		0xffffffff80000001)
	SUB(4, ul,	0x7fffffff,	    0x80000000,		0xffffffffffffffff)
	SUB(5, ul,	0x80000000,	    0x7fffffff,		1)
	SUB(6, ul,	0x7fffffff,	    0xffffffff,		0xffffffff80000000)
	SUB(7, ul,	0xffffffff,	    0x7fffffff,		0x80000000)
	SUB(9, ul,	0xffffffff,	    0xffffffff,		0)
	SUB(10, ul,	0x7fffffff,	    0,			0x7fffffff)
	SUB(11, ul,	0,		    0x7fffffff,		0xffffffff80000001)
	SUB(12, ul,	0x7fffffffffffffff, 1,			0x7ffffffffffffffe)
	SUB(13, ul,	1,		    0x7fffffffffffffff, 0x8000000000000002)
	SUB(14, ul,	0x8000000000000000, 1,			0x7fffffffffffffff)
	SUB(15, ul,	1,		    0x8000000000000000, 0x8000000000000001)
	SUB(16, ul,	0x7fffffffffffffff, 0x8000000000000000, 0xffffffffffffffff)
	SUB(17, ul,	0x8000000000000000, 0x7fffffffffffffff,	1)
	SUB(18, ul,	0x7fffffffffffffff, 0xffffffffffffffff, 0x8000000000000000)
	SUB(19, ul,	0xffffffffffffffff, 0x7fffffffffffffff, 0x8000000000000000)
	SUB(20, ul,	0xffffffffffffffff, 0xffffffffffffffff,	0)
	SUB(0, p,	0x7fffffff,	    1,			0x7ffffffe)
	SUB(1, p,	1,		    0x7fffffff,		0xffffffff80000002)
	SUB(2, p,	0x80000000,	    1,			0x7fffffff)
	SUB(3, p,	1,		    0x80000000,		0xffffffff80000001)
	SUB(4, p,	0x7fffffff,	    0x80000000,		0xffffffffffffffff)
	SUB(5, p,	0x80000000,	    0x7fffffff,		1)
	SUB(6, p,	0x7fffffff,	    0xffffffff,		0xffffffff80000000)
	SUB(7, p,	0xffffffff,	    0x7fffffff,		0x80000000)
	SUB(9, p,	0xffffffff,	    0xffffffff,		0)
	SUB(10, p,	0x7fffffff,	    0,			0x7fffffff)
	SUB(11, p,	0,		    0x7fffffff,		0xffffffff80000001)
	SUB(12, p,	0x7fffffffffffffff, 1,			0x7ffffffffffffffe)
	SUB(13, p,	1,		    0x7fffffffffffffff, 0x8000000000000002)
	SUB(14, p,	0x8000000000000000, 1,			0x7fffffffffffffff)
	SUB(15, p,	1,		    0x8000000000000000, 0x8000000000000001)
	SUB(16, p,	0x7fffffffffffffff, 0x8000000000000000, 0xffffffffffffffff)
	SUB(17, p,	0x8000000000000000, 0x7fffffffffffffff,	1)
	SUB(18, p,	0x7fffffffffffffff, 0xffffffffffffffff, 0x8000000000000000)
	SUB(19, p,	0xffffffffffffffff, 0x7fffffffffffffff, 0x8000000000000000)
	SUB(20, p,	0xffffffffffffffff, 0xffffffffffffffff,	0)
#endif

#undef SUB
#define SUB(N, T, I0, V)	ALUC(N, T, sub, I0, V)
	SUB(0, i,	0,			0)
	SUB(1, i,	0x7fffffff,		0)
	SUB(2, i,	0x80000000,		0)
	SUB(3, i,	0xffffffff,		0)
	SUB(0, ui,	0,			0)
	SUB(1, ui,	0x7fffffff,		0)
	SUB(2, ui,	0x80000000,		0)
	SUB(3, ui,	0xffffffff,		0)
#if __WORDSIZE == 32
	SUB(0, l,	0,			0)
	SUB(1, l,	0x7fffffff,		0)
	SUB(2, l,	0x80000000,		0)
	SUB(3, l,	0xffffffff,		0)
	SUB(0, ul,	0,			0)
	SUB(1, ul,	0x7fffffff,		0)
	SUB(2, ul,	0x80000000,		0)
	SUB(3, ul,	0xffffffff,		0)
	SUB(0, p,	0,			0)
	SUB(1, p,	0x7fffffff,		0)
	SUB(2, p,	0x80000000,		0)
	SUB(3, p,	0xffffffff,		0)
#else
	SUB(0, l,	0,			0)
	SUB(1, l,	0x7fffffff,		0)
	SUB(2, l,	0x80000000,		0)
	SUB(3, l,	0xffffffff,		0)
	SUB(4, l,	0x7fffffffffffffff,	0)
	SUB(5, l,	0x8000000000000000,	0)
	SUB(6, l,	0xffffffffffffffff,	0)
	SUB(0, ul,	0,			0)
	SUB(1, ul,	0x7fffffff,		0)
	SUB(2, ul,	0x80000000,		0)
	SUB(3, ul,	0xffffffff,		0)
	SUB(4, ul,	0x7fffffffffffffff,	0)
	SUB(5, ul,	0x8000000000000000,	0)
	SUB(6, ul,	0xffffffffffffffff,	0)
	SUB(0, p,	0,			0)
	SUB(1, p,	0x7fffffff,		0)
	SUB(2, p,	0x80000000,		0)
	SUB(3, p,	0xffffffff,		0)
	SUB(4, p,	0x7fffffffffffffff,	0)
	SUB(5, p,	0x8000000000000000,	0)
	SUB(6, p,	0xffffffffffffffff,	0)
#endif

#undef SUB
#define SUB(N, T, I0, I1, V)	FOP(N, T, sub, I0, I1, V)
	SUB(0, f,	-0.5,	    0.5,	-1.0)
	SUB(1, f,	 0.25,	    0.75,	-0.5)
	SUB(0, d,	-0.5,	    0.5,	-1.0)
	SUB(1, d,	 0.25,	    0.75,	-0.5)

	ret
